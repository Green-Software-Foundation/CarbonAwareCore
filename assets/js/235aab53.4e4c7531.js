"use strict";(self.webpackChunkcasdk_docs=self.webpackChunkcasdk_docs||[]).push([[9885],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>w});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),d=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=d(e.components);return n.createElement(c.Provider,{value:t},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),l=d(a),h=r,w=l["".concat(c,".").concat(h)]||l[h]||p[h]||o;return a?n.createElement(w,s(s({ref:t},u),{},{components:a})):n.createElement(w,s({ref:t},u))}));function w(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[l]="string"==typeof e?e:r,s[1]=i;for(var d=2;d<o;d++)s[d]=a[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},3276:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:3},s="Data Sources",i={unversionedId:"architecture/data-sources",id:"architecture/data-sources",title:"Data Sources",description:"Data sources allow developers easily integrate different data providers into the",source:"@site/docs/architecture/data-sources.md",sourceDirName:"architecture",slug:"/architecture/data-sources",permalink:"/carbon-aware-sdk/docs/architecture/data-sources",draft:!1,editUrl:"https://github.com/Green-Software-Foundation/carbon-aware-sdk/docs/architecture/data-sources.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"0013. Add option to display CLI output in CSV format",permalink:"/carbon-aware-sdk/docs/architecture/decisions/cli-output-csv"},next:{title:"C# Client Library",permalink:"/carbon-aware-sdk/docs/architecture/c-sharp-client-library"}},c={},d=[{value:"Data Sources&#39; Responsibility",id:"data-sources-responsibility",level:2},{value:"GSF Handler &lt;-&gt; Data Source Contract",id:"gsf-handler---data-source-contract",level:3},{value:"Post-Processing Caveat",id:"post-processing-caveat",level:4},{value:"Creating a New Data Source",id:"creating-a-new-data-source",level:2},{value:"Adding/Extending a Data Source Interface",id:"addingextending-a-data-source-interface",level:3},{value:"Add Dependency Injection Configuration",id:"add-dependency-injection-configuration",level:3},{value:"Register the New Data Source",id:"register-the-new-data-source",level:3},{value:"Adding Tests",id:"adding-tests",level:3},{value:"Try it Out",id:"try-it-out",level:3}],u={toc:d},l="wrapper";function p(e){let{components:t,...a}=e;return(0,r.kt)(l,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-sources"},"Data Sources"),(0,r.kt)("p",null,"Data sources allow developers easily integrate different data providers into the\ncarbon aware SDK (",(0,r.kt)("a",{parentName:"p",href:"https://www.wattime.org"},"WattTime"),",\n",(0,r.kt)("a",{parentName:"p",href:"https://www.electricitymaps.com/"},"ElectricityMaps"),",\n",(0,r.kt)("a",{parentName:"p",href:"https://www.co2signal.com/"},"ElectricityMapsFree")," etc) to be made available to\nall higher-level user-interfaces (WebAPI, CLI, etc), while avoiding the details\nof how to interact with any specific provider."),(0,r.kt)("h2",{id:"data-sources-responsibility"},"Data Sources' Responsibility"),(0,r.kt)("p",null,"Data sources act as the data ingestion tier for the SDK, handling the retrieval\nof data from a given data provider. They contain specific knowledge about the\ndata provider they access, such as flags used in requests, fields that come back\nin responses, special use cases etc. They also handle any external calls that\nmust be made to access the data provider. While helper clients can be built to\nhandle these calls, only the data source should have access to, and knowledge\nof, that client."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For example, the WattTimeDataSource has a reference to a private\nWattTimeClient within it's implementation. The WattTimeClient handles the HTTP\nGET/POST calls to WattTime and the data source invokes the client once it has\nprocessed the request, and then processes the response before returning a\nfinal result.")),(0,r.kt)("h3",{id:"gsf-handler---data-source-contract"},"GSF Handler <-> Data Source Contract"),(0,r.kt)("p",null,'In order for the SDK to support different data sources, there is a defined\ncontract between the Handler and the Data tier. The handler acts as the\n"Business Logic" of the application so it needs a standard way of requesting\ndata from the data source and a standard response in return. This means that\neach data source is responsible for:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Pre-processing any arguments passed to it from the handler to create the\nexpected request for the data provider."),(0,r.kt)("li",{parentName:"ul"},"Post-processing the data provider result to create the expected return type\nfor the Handler.")),(0,r.kt)("p",null,"Each handler is responsible for interacting on its own domain. For instance,\nEmissionsHandler can have a method ",(0,r.kt)("inlineCode",{parentName:"p"},"GetAverageCarbonIntensityAsync()")," to pull\nEmissionsData data from a configured data source and calculate the average\ncarbon intensity. ForecastHandler can have a method ",(0,r.kt)("inlineCode",{parentName:"p"},"GetCurrentForecastAsync()"),",\nthat will return a EmissionsForecast instance."),(0,r.kt)("h4",{id:"post-processing-caveat"},"Post-Processing Caveat"),(0,r.kt)("p",null,"Post-processing should only ensure the types are what is expected and to fix any\ninconsistencies or issues that may be known to that specific data source. This\npost-processing ",(0,r.kt)("strong",{parentName:"p"},"should not")," do any extra data operations beyond those\nrequired to fulfill the Handler request ( i.e., averaging, min/max ops etc.).\nIn other words, the data source should only manipulate data for the aim of\nreturning ",(0,r.kt)("em",{parentName:"p"},"valid","*")," data in the boundaries requested by the Handler."),(0,r.kt)("p",null,"*"," What constitutes ",(0,r.kt)("em",{parentName:"p"},"valid")," data varies between data sources. It may be the case\nthat some data sources don't handle time boundaries well so extra processing may\nbe required to ensure the data returned is what the handler expects assuming\nit was any data source and that those edge cases would be handled properly."),(0,r.kt)("h2",{id:"creating-a-new-data-source"},"Creating a New Data Source"),(0,r.kt)("p",null,"Each new data source should be a new .NET project under the\n",(0,r.kt)("inlineCode",{parentName:"p"},"CarbonAware.DataSources")," namespace and corresponding directory. This project\nshould have a reference to the ",(0,r.kt)("inlineCode",{parentName:"p"},"CarbonAware")," project, and include the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Microsoft.Extensions.DependencyInjection")," package. It should also be added to\nthe solution. We have provided a command snippet below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd src\ndotnet new classlib --name CarbonAware.DataSources.MyNewDataSource -o CarbonAware.DataSources/CarbonAware.DataSources.MyNewDataSource/src\ndotnet sln add CarbonAware.DataSources/CarbonAware.DataSources.MyNewDataSource/src/CarbonAware.DataSources.MyNewDataSource.csproj\ndotnet add CarbonAware.DataSources/CarbonAware.DataSources.MyNewDataSource/src/CarbonAware.DataSources.MyNewDataSource.csproj reference CarbonAware/src/CarbonAware.csproj\ncd CarbonAware.DataSources/CarbonAware.DataSources.MyNewDataSource/src\ndotnet add package Microsoft.Extensions.DependencyInjection\n")),(0,r.kt)("h3",{id:"addingextending-a-data-source-interface"},"Adding/Extending a Data Source Interface"),(0,r.kt)("p",null,"Each new data source should extend from a generic data source interface. A data\nsource interface defines all the parameters and functions that any data source\nthat falls under it's purview must define/implement. By defining the interface,\nit allows the SDK to switch between the set of data sources seamlessly because\nthey all share the same input functions and output types."),(0,r.kt)("p",null,"Currently there are 2 data source interfaces defined - ",(0,r.kt)("inlineCode",{parentName:"p"},"IEmissionsDataSource"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"IForecastDataSource")," - which provides functionality for retrieving actual\nand forecasted carbon intensity data respectively. A new data source interface\nshould be defined only when there is a new general area of calculation that is\nbeing introduced to the SDK."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using CarbonAware.Interfaces;\nusing CarbonAware.Model;\nusing Microsoft.Extensions.Logging;\nnamespace CarbonAware.DataSources.MyNewDataSource;\npublic class MyNewDataSource: IEmissionsDataSource\n{\n    ...\n}\n")),(0,r.kt)("h3",{id:"add-dependency-injection-configuration"},"Add Dependency Injection Configuration"),(0,r.kt)("p",null,"The SDK uses dependency injection to load registered data sources based on set\nenvironment variables. For a data source to be registered, it need to have a\nService Collection Extension defined. To do so, add a ",(0,r.kt)("inlineCode",{parentName:"p"},"Configuration")," directory\nin your data source project and create a new ServiceCollectionExtensions file.\nWe have provided a command snippet below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cd src/CarbonAware.DataSources/CarbonAware.DataSources.MyNewDataSource/src\nmkdir Configuration\ntouch Configuration\\ServiceCollectionExtensions.cs\n")),(0,r.kt)("p",null,"Using the skeleton below, add the data source specific configuration and\nimplementation instances to the service collection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.DependencyInjection.Extensions;\nnamespace CarbonAware.DataSources.MyNewDataSource.Configuration;\npublic static class ServiceCollectionExtensions\n{\n    public static void AddMyNewDataSource(this IServiceCollection services)\n    {\n        // ... register your data source with the IServiceCollection instance\n    }\n}\n")),(0,r.kt)("h3",{id:"register-the-new-data-source"},"Register the New Data Source"),(0,r.kt)("p",null,"Once the data source's ServiceCollectionExtensions is configured, it can be\nregistered as an available data source for the SDK by adding to the switch\nstatement found in the AddDataSourceService function of\n",(0,r.kt)("a",{parentName:"p",href:"../../src/CarbonAware.DataSources/CarbonAware.DataSources.Registration%5CConfiguration%5CServiceCollectionExtensions.cs"},"this file"),".\nNote you will need to add a new enum type to the ",(0,r.kt)("inlineCode",{parentName:"p"},"DataSourceType"),"\n",(0,r.kt)("a",{parentName:"p",href:"../../src/CarbonAware.DataSources/CarbonAware.DataSources.Registration/Configuration/DataSourceType.cs"},"enum file"),"\nto reference in the switch statement."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"    switch (dataSourceType)\n    {\n        ...\n        case DataSourceType.MyNewDataSourceEnum:\n        {\n            services.AddMyNewDataSource();\n            break;\n        }\n        ...\n    }\n")),(0,r.kt)("h3",{id:"adding-tests"},"Adding Tests"),(0,r.kt)("p",null,"Each new data source is expected to come with a robust unit test suite that\nensures that the main flows and edge cases are properly handled. This also\nensures that the SDK can switch seamlessly between data sources and the\nexperiences up the stack remains consistent and helpful to the user."),(0,r.kt)("p",null,"The unit tests should be added as a new project under the data source's test\ndirectory:\n",(0,r.kt)("inlineCode",{parentName:"p"},"CarbonAware.DataSources/CarbonAware.DataSources.MyNewDataSource/test"),". Be sure\nto include a reference to the data source's project and add it to the solution.\nWe have provided a command snippet below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cd src\ndotnet new nunit --name CarbonAware.DataSources.MyNewDataSource.Tests -o CarbonAware.DataSources/CarbonAware.DataSources.MyNewDataSource/test\ndotnet sln CarbonAwareSDK.sln add CarbonAware.DataSources/CarbonAware.DataSources.MyNewDataSource/test/CarbonAware.DataSources.MyNewDataSource.Tests.csproj\ncd CarbonAware.DataSources/CarbonAware.DataSources.MyNewDataSource\ndotnet add test/CarbonAware.DataSources.MyNewDataSource.Tests.csproj reference src/CarbonAware.DataSources.MyNewDataSource.csproj\n")),(0,r.kt)("h3",{id:"try-it-out"},"Try it Out"),(0,r.kt)("p",null,"You are now ready to try out your new data source! If you added a new\n",(0,r.kt)("inlineCode",{parentName:"p"},"IEmissionsDataSource"),", you can configure it using the ",(0,r.kt)("inlineCode",{parentName:"p"},"EmissionsDataSource"),"\nsetting:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'DataSources__EmissionsDataSource="MyNewDataSource"\nDataSources__Configurations__MyNewDataSource__Proxy__UseProxy=true\n')),(0,r.kt)("p",null,"Both the WebAPI and the CLI read the env variables in so once set, you can spin\nup either and send requests to get data from the new data source."))}p.isMDXComponent=!0}}]);