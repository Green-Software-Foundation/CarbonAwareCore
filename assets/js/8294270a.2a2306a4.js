"use strict";(self.webpackChunkcasdk_docs=self.webpackChunkcasdk_docs||[]).push([[4743],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=i.createContext({}),s=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=s(e.components);return i.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),p=o,h=d["".concat(c,".").concat(p)]||d[p]||m[p]||a;return n?i.createElement(h,r(r({ref:t},u),{},{components:n})):i.createElement(h,r({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:o,r[1]=l;for(var s=2;s<a;s++)r[s]=n[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},263:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var i=n(7462),o=(n(7294),n(3905));const a={},r="Linting",l={unversionedId:"tutorial-extras/linting",id:"tutorial-extras/linting",title:"Linting",description:"- Linting",source:"@site/docs/tutorial-extras/linting.md",sourceDirName:"tutorial-extras",slug:"/tutorial-extras/linting",permalink:"/carbon-aware-sdk/docs/tutorial-extras/linting",draft:!1,editUrl:"https://github.com/Green-Software-Foundation/carbon-aware-sdk/docs/tutorial-extras/linting.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/carbon-aware-sdk/docs/tutorial-extras/configuration"},next:{title:"packaging",permalink:"/carbon-aware-sdk/docs/tutorial-extras/packaging"}},c={},s=[{value:"Markdown Linting",id:"markdown-linting",level:2},{value:"Github Action",id:"github-action",level:3},{value:"Linting Locally",id:"linting-locally",level:3},{value:"VS Code Extension",id:"vs-code-extension",level:4}],u={toc:s},d="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"linting"},"Linting"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#linting"},"Linting"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#markdown-linting"},"Markdown Linting"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#github-action"},"Github Action")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#linting-locally"},"Linting Locally")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#vs-code-extension"},"VS Code Extension"))))))),(0,o.kt)("h2",{id:"markdown-linting"},"Markdown Linting"),(0,o.kt)("p",null,"Per ",(0,o.kt)("a",{parentName:"p",href:"/carbon-aware-sdk/docs/architecture/decisions/documentation"},"ADR 0004"),", documentation\nwill be linted using\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/DavidAnson/markdownlint/tree/main"},"markdownlint")," to enforce\nfile consistency for readers and authors."),(0,o.kt)("p",null,"This repo contains a\n",(0,o.kt)("a",{parentName:"p",href:"../../custom.markdownlint.jsonc"},"custom.markdownlint.jsonc")," configuration file\nat the root which handles the markdown rules enforced. This file can be used\nlocally (to check/fix violations) and is also consumed by the Github Action\npipeline to check for consistency on PRs."),(0,o.kt)("h3",{id:"github-action"},"Github Action"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"../.github/workflows/linting.yaml"},"linting.yaml")," workflow contains the\ngithub action that will run on for each PR. The ",(0,o.kt)("inlineCode",{parentName:"p"},'"Markdown Linting"')," job handles\nrunning the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/DavidAnson/markdownlint-cli2"},"markdown linter"),"\nusing the ",(0,o.kt)("a",{parentName:"p",href:"../../custom.markdownlint.jsonc"},"custom.markdownlint.jsonc")," config\nfile at the root of the repo. This action is non-blocking, and is meant to\nprovide information to the user about violations ."),(0,o.kt)("h3",{id:"linting-locally"},"Linting Locally"),(0,o.kt)("p",null,"In order to run markdown linting locally, you will need to have an installation\nof ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/DavidAnson/markdownlint"},"markdownlint"),". We reccomend the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/DavidAnson/markdownlint-cli2"},"markdownlint-cli2"),", which is\nthe same used by the Github action pipeline."),(0,o.kt)("p",null,"The various CLI commands are detailed in the Github docs but the command the\npipeline will run (checks all files given the custom config except for .github\nfolder) is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'markdownlint-cli2-config "./custom.markdownlint.jsonc" {"*[^.github]/**,*"}.md\n')),(0,o.kt)("p",null,"The result will list all of the violations including the file, line number, and\ncode for the violation. An example successful result is included below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Finding: **/*.md\nLinting: 35 file(s)\nSummary: 0 error(s)\n")),(0,o.kt)("h4",{id:"vs-code-extension"},"VS Code Extension"),(0,o.kt)("p",null,"If you are developing in VS Code, there is also a\n",(0,o.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint"},"markdownlint"),"\nextension which you can install. This extension will let you leverage the VS\nCode formatter to fix your markdown files. While it may not be able to fix all\nof the violations, it will catch most of the small formatting ones."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note the extension uses the default formatting configuration. If you want to\nauto-format based on our custom config file, you will need to manually include\nthose in the extensions' settings.")))}m.isMDXComponent=!0}}]);