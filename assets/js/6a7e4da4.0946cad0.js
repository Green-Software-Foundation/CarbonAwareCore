"use strict";(self.webpackChunkcasdk_docs=self.webpackChunkcasdk_docs||[]).push([[6345],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(a),u=i,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||r;return a?n.createElement(h,o(o({ref:t},p),{},{components:a})):n.createElement(h,o({ref:t},p))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1289:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var n=a(7462),i=(a(7294),a(3905));const r={},o="Carbon Aware Library",s={unversionedId:"tutorial-extras/carbon-aware-library",id:"tutorial-extras/carbon-aware-library",title:"Carbon Aware Library",description:"The Carbon Aware SDK provides a C\\# Client Library to get the marginal carbon",source:"@site/docs/tutorial-extras/carbon-aware-library.md",sourceDirName:"tutorial-extras",slug:"/tutorial-extras/carbon-aware-library",permalink:"/carbon-aware-sdk/docs/tutorial-extras/carbon-aware-library",draft:!1,editUrl:"https://github.com/Green-Software-Foundation/carbon-aware-sdk/docs/tutorial-extras/carbon-aware-library.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Selecting a Data Source",permalink:"/carbon-aware-sdk/docs/tutorial-extras/selecting-a-data-source"},next:{title:"Configuration",permalink:"/carbon-aware-sdk/docs/tutorial-extras/configuration"}},l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"EmissionsHandler Functions",id:"emissionshandler-functions",level:2},{value:"GetEmissionsDataAsync",id:"getemissionsdataasync",level:3},{value:"<em>Signature 1: Single Location + Start + End</em>",id:"signature-1-single-location--start--end",level:4},{value:"<em>Signature 2: Array of Locations + Start + End</em>",id:"signature-2-array-of-locations--start--end",level:4},{value:"GetBestEmissionsDataAsync",id:"getbestemissionsdataasync",level:3},{value:"<em>Signature 1: Location + Start + End</em>",id:"signature-1-location--start--end",level:4},{value:"<em>Signature 2: Multiple Locations + Start + End</em>",id:"signature-2-multiple-locations--start--end",level:4},{value:"GetAverageCarbonIntensityAsync",id:"getaveragecarbonintensityasync",level:3},{value:"ForecastHandler Functions",id:"forecasthandler-functions",level:2},{value:"GetCurrentForecastAsync",id:"getcurrentforecastasync",level:3},{value:"GetForecastByDateAsync",id:"getforecastbydateasync",level:3},{value:"Data Sources",id:"data-sources",level:2},{value:"WattTime",id:"watttime",level:3},{value:"Locations",id:"locations",level:4},{value:"Exception Handling",id:"exception-handling",level:4},{value:"Example Emissions Call Using WattTime",id:"example-emissions-call-using-watttime",level:4},{value:"ElectricityMaps",id:"electricitymaps",level:3},{value:"Locations",id:"locations-1",level:4},{value:"Exception Handling",id:"exception-handling-1",level:4},{value:"ElectricityMapsFree",id:"electricitymapsfree",level:3},{value:"Locations",id:"locations-2",level:4},{value:"Exception Handling",id:"exception-handling-2",level:4}],p={toc:c},d="wrapper";function m(e){let{components:t,...r}=e;return(0,i.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"carbon-aware-library"},"Carbon Aware Library"),(0,i.kt)("p",null,"The Carbon Aware SDK provides a C","#"," Client Library to get the marginal carbon\nintensity for a given location and time period. The values reported in the Green\nSoftware Foundation's specification for marginal carbon intensity (Grams per\nKilowatt Hour)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Recommended"))," - This user interface is best for when you need a consumable\nversion of the SDK as this library can be packaged into a nuget and consumed\nlocally."),(0,i.kt)("p",null,"The library replicates the Web Api, CLI and SDK functionality, leveraging the\nsame configuration"),(0,i.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#carbon-aware-library"},"Carbon Aware Library"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#table-of-contents"},"Table of Contents")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#emissionshandler-functions"},"EmissionsHandler Functions"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#getemissionsdataasync"},"GetEmissionsDataAsync")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#getbestemissionsdataasync"},"GetBestEmissionsDataAsync")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#getaveragecarbonintensityasync"},"GetAverageCarbonIntensityAsync")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#forecasthandler-functions"},"ForecastHandler Functions"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#getcurrentforecastasync"},"GetCurrentForecastAsync")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#getforecastbydateasync"},"GetForecastByDateAsync")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#data-sources"},"Data Sources"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#watttime"},"WattTime"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#locations"},"Locations")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#exception-handling"},"Exception Handling")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#electricitymaps"},"ElectricityMaps"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#locations"},"Locations")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#exception-handling"},"Exception Handling")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#electricitymapsfree"},"ElectricityMapsFree"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#locations"},"Locations")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#exception-handling"},"Exception Handling"))))))))),(0,i.kt)("h2",{id:"emissionshandler-functions"},"EmissionsHandler Functions"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"EmissionsHandler")," is responsible for all the functions that query the SDK\nfor ",(0,i.kt)("inlineCode",{parentName:"p"},"EmissionsData"),". This includes both getting the data directly, or getting\nthe average carbon intensity from the data. There are currently 4 functions\nmanaged by this handler:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#getemissionsdataasync"},"GetEmissionsDataAsync")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#getbestemissionsdataasync"},"GetBestEmissionsDataAsync")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#getaveragecarbonintensityasync"},"GetAverageCarbonIntensityAsync"))),(0,i.kt)("h3",{id:"getemissionsdataasync"},"GetEmissionsDataAsync"),(0,i.kt)("p",null,"This function calculates the observed emission data by location for a specified\ntime period. The location is a required parameter and is the name of the data\nregion for the configured Cloud provider. If time period is not provided, it\nretrieves all the data until the current time."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"GetEmissionsDataAsync")," has two signatures: one which takes a single location\nand one which takes an array of locations. Both signatures return the same\nresponse: an array of ",(0,i.kt)("inlineCode",{parentName:"p"},"EmissionsData")," objects that contains the location, time\nand the rating in g/kWh."),(0,i.kt)("h4",{id:"signature-1-single-location--start--end"},(0,i.kt)("em",{parentName:"h4"},"Signature 1: Single Location + Start + End")),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"location"),": The string name of the data region for the configured Cloud\nprovider."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"startTime"),": ","[Optional]"," The time at which the workload and corresponding\ncarbon usage begins."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"endTime"),": ","[Optional]"," The time at which the workload and corresponding carbon\nusage ends.")),(0,i.kt)("p",null,"Request:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var data =  await this._emissionsHandler.GetEmissionsDataAsync(\n  "eastus",\n  DateTimeOffset(2022,1,2),\n  DateTimeOffset(2022,5,17)\n);\n')),(0,i.kt)("p",null,"Response:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'[\n  EmissionsData()\n    {\n      Location:"eastus"\n      Time: DateTimeOffset("2022-05-17T20:45:11.5092741+00:00"),\n      Rating: 70,\n      Duration: 60,\n    },\n  ...\n]\n')),(0,i.kt)("h4",{id:"signature-2-array-of-locations--start--end"},(0,i.kt)("em",{parentName:"h4"},"Signature 2: Array of Locations + Start + End")),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"locations"),": The string array of names of the data regions for the configured\nCloud provider."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"startTime"),": ","[Optional]"," The time at which the workload and corresponding\ncarbon usage begins."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"endTime"),": ","[Optional]"," The time at which the workload and corresponding carbon\nusage ends.")),(0,i.kt)("p",null,"Request:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var data =  await this._emissionsHandler.GetEmissionsDataAsync(\n  string[]{"eastus", "westus"},\n  DateTimeOffset(2022,1,2),\n  DateTimeOffset(2022,5,17)\n);\n')),(0,i.kt)("p",null,"Response:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'[\n  EmissionsData()\n    {\n      Location:"eastus"\n      Time: DateTimeOffset("2022-05-17T20:45:11.5092741+00:00"),\n      Rating: 70,\n      Duration: 60,\n    },\n  EmissionsData()\n    {\n      Location:"west"\n      Time: DateTimeOffset("2022-05-17T20:45:11.5092741+00:00"),\n      Rating: 52,\n      Duration: 60,\n    },\n  ...\n]\n')),(0,i.kt)("h3",{id:"getbestemissionsdataasync"},"GetBestEmissionsDataAsync"),(0,i.kt)("p",null,"This function calculates the best observed emission data by an array of\nlocations for a specified time period."),(0,i.kt)("p",null,"Location is a required parameter and is an array of the names of the data region\nfor the configured Cloud provider. If time period is not provided, it retrieves\nall the data until the current time."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"GetBestEmissionsDataAsync")," has two signatures: one which takes a single\nlocation and one which takes an array of locations. Both signatures return the\nsame response: an array of ",(0,i.kt)("inlineCode",{parentName:"p"},"EmissionsData")," objects that contains the location,\ntime and the rating in g/kWh."),(0,i.kt)("h4",{id:"signature-1-location--start--end"},(0,i.kt)("em",{parentName:"h4"},"Signature 1: Location + Start + End")),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"location"),": The string name of the data regions for the configured Cloud\nprovider."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"startTime"),": ","[Optional]"," The time at which the workload and corresponding\ncarbon usage begins."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"endTime"),": ","[Optional]"," The time at which the workload and corresponding carbon\nusage ends.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var data =  await this._emissionsHandler.GetBestEmissionsDataAsync(\n  "eastus",\n  DateTimeOffset(2022,1,2),\n  DateTimeOffset(2022,5,17)\n);\n')),(0,i.kt)("p",null,"The response is an array of ",(0,i.kt)("inlineCode",{parentName:"p"},"EmissionsData")," objects that contains the location,\ntime and the rating in g/kWh."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'[\n  EmissionsData()\n    {\n      Location:"eastus"\n      Time: DateTimeOffset("2022-05-17T20:45:11.5092741+00:00"),\n      Rating: 70,\n      Duration: 60,\n    },\n  ...\n]\n')),(0,i.kt)("h4",{id:"signature-2-multiple-locations--start--end"},(0,i.kt)("em",{parentName:"h4"},"Signature 2: Multiple Locations + Start + End")),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"locations"),": The string array of names of the data regions for the configured\nCloud provider."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"startTime"),": ","[Optional]"," The time at which the workload and corresponding\ncarbon usage begins."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"endTime"),": ","[Optional]"," The time at which the workload and corresponding carbon\nusage ends.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var data =  await this._emissionsHandler.GetBestEmissionsDataAsync(\n  string[]{"eastus", "westus"},\n  DateTimeOffset(2022,1,2),\n  DateTimeOffset(2022,5,17)\n);\n')),(0,i.kt)("p",null,"The response is an array of ",(0,i.kt)("inlineCode",{parentName:"p"},"EmissionsData")," objects that contains the location,\ntime and the rating in g/kWh."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'[\n  EmissionsData()\n    {\n      Location:"westus"\n      Time: DateTimeOffset("2022-05-17T20:45:11.5092741+00:00"),\n      Rating: 70,\n      Duration: 60,\n    },\n  ...\n]\n')),(0,i.kt)("h3",{id:"getaveragecarbonintensityasync"},"GetAverageCarbonIntensityAsync"),(0,i.kt)("p",null,"This function retrieves the measured carbon intensity data for a given location\nbetween the time boundaries and calculates the average carbon intensity during\nthat period. Location is a required parameter and is the name of the data region\nfor the configured Cloud provider. This function is useful for reporting the\nmeasured carbon intensity for a specific time period in a specific location."),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"location"),": The string name of the data region for the configured Cloud\nprovider."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"start"),": The time at which the workflow we are measuring carbon intensity for\nstarted"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"end"),": The time at which the workflow we are measuring carbon intensity for\nended")),(0,i.kt)("p",null,"Request:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var data =  await this._emissionsHandler.GetAverageCarbonIntensityAsync(\n  "eastus",\n  DateTimeOffset(2022,7,19,14,0,0,Timespan.Zero),\n  DateTimeOffset(2022,7,19,18,0,0,Timespan.Zero)\n);\n')),(0,i.kt)("p",null,"The response is a single double value representing the calculated average\nmarginal carbon intensity g/kWh."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"345.434\n")),(0,i.kt)("h2",{id:"forecasthandler-functions"},"ForecastHandler Functions"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ForecastHandler")," is responsible for all the functions that query the SDK\nfor ",(0,i.kt)("inlineCode",{parentName:"p"},"EmissionsForecast"),". There are currently 2 functions managed by this\nhandler:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#getcurrentforecastasync"},"GetCurrentForecastAsync")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#getforecastbydateasync"},"GetForecastByDateAsync"))),(0,i.kt)("h3",{id:"getcurrentforecastasync"},"GetCurrentForecastAsync"),(0,i.kt)("p",null,'This function fetches only the most recently generated forecast for all provided\nlocations. It uses the "dataStartAt" and "dataEndAt" parameters to scope the\nforecasted data points (if available for those times). If no start or end time\nboundaries are provided, the entire forecast dataset is used. The scoped data\npoints are used to calculate average marginal carbon intensities of the\nspecified "windowSize" and the optimal marginal carbon intensity window is\nidentified.'),(0,i.kt)("p",null,"The forecast data represents what the data source predicts future marginal\ncarbon intensity values to be, not actual measured emissions data (as future\nvalues cannot be known)."),(0,i.kt)("p",null,"This endpoint is useful for determining if there is a more carbon-optimal time\nto use electricity predicted in the future."),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"location"),": This is a required parameter and is an array of the names of the\ndata region for the configured Cloud provider."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"dataStartAt"),": Start time boundary of the current forecast data points.\nIgnores current forecast data points before this time. Must be within the\nforecast data point timestamps. Defaults to the earliest time in the forecast\ndata."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"dataEndAt"),": End time boundary of the current forecast data points. Ignores\ncurrent forecast data points after this time. Must be within the forecast\ndata point timestamps. Defaults to the latest time in the forecast data. If\nneither ",(0,i.kt)("inlineCode",{parentName:"li"},"dataStartAt")," nor ",(0,i.kt)("inlineCode",{parentName:"li"},"dataEndAt")," are provided, all forecasted data\npoints are used in calculating the optimal marginal carbon intensity window."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"windowSize"),": The estimated duration (in minutes) of the workload. Defaults\nto the duration of a single forecast data point.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var data = await this._forecastHandler.GetCurrentForecastAsync(\n  "northeurope",\n  DateTimeOffset(2022,7,19,14,0,0,TimeSpan.Zero),\n  DateTimeOffset(2022,7,20,4,38,0,TimeSpan.Zero),\n  10\n);\n')),(0,i.kt)("p",null,"The response is an array of ",(0,i.kt)("inlineCode",{parentName:"p"},"EmissionsForecast")," objects (one per requested\nlocation) with their optimal marginal carbon intensity windows."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'[\n  EmissionsForecast()\n  {\n    RequestedAt: DateTimeOffset("2022-07-19T13:37:49+00:00"),\n    GeneratedAt: DateTimeOffset("2022-07-19T13:35:00+00:00"),\n    OptimalDataPoints: [\n      EmissionsData()\n      {\n        Location: "IE",\n        Time: DateTimeOffset("2022-07-19T18:45:00+00:00"),\n        Duration: 10,\n        Rating: 448.4451043375\n      }\n    ],\n    EmissionsDataPoints: [\n      EmissionsData()\n      {\n        Location: "IE",\n        Time: DateTimeOffset("2022-07-19T14:00:00+00:00"),\n        Duration: 10,\n        Rating: 532.02293146\n      },\n      ...\n      EmissionsData()\n      {\n        Location: "IE",\n        Time: DateTimeOffset("2022-07-20T04:25:00+00:00"),\n        Duration: 10,\n        Rating: 535.7318741001667\n      }\n    ]\n  }\n]\n')),(0,i.kt)("h3",{id:"getforecastbydateasync"},"GetForecastByDateAsync"),(0,i.kt)("p",null,"This function takes a requests for historical forecast data, fetches it, and\ncalculates the optimal marginal carbon intensity window. This endpoint is useful\nfor back-testing what one might have done in the past, if they had access to the\ncurrent forecast at the time."),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"location"),": This is a required parameter and is the name of the data region\nfor the configured Cloud provider."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"dataStartAt"),": Start time boundary of the forecast data points. Ignores\nforecast data points before this time. Must be within the forecast data point\ntimestamps. Defaults to the earliest time in the forecast data."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"dataEndAt"),": End time boundary of the forecast data points. Ignores forecast\ndata points after this time. Must be within the forecast data point\ntimestamps. Defaults to the latest time in the forecast data."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"requestedAt"),": This is a required parameter and is the historical time used\nto fetch the most recent forecast as of that time."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"windowSize"),": The estimated duration (in minutes) of the workload. Defaults\nto the duration of a single forecast data point")),(0,i.kt)("p",null,"If neither ",(0,i.kt)("inlineCode",{parentName:"p"},"dataStartAt")," nor ",(0,i.kt)("inlineCode",{parentName:"p"},"dataEndAt")," are provided, all forecasted data\npoints are used in calculating the optimal marginal carbon intensity window."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var data = await this._forecastHandler.GetForecastByDateAsync(\n  "northeurope",\n  DateTimeOffset(2022,7,19,14,0,0,TimeSpan.Zero),\n  DateTimeOffset(2022,7,20,4,38,0,TimeSpan.Zero),\n  DateTimeOffset(2022,7,19,13,30,0,TimeSpan.Zero),\n  10\n);\n')),(0,i.kt)("p",null,"The response is an ",(0,i.kt)("inlineCode",{parentName:"p"},"EmissionsForecast")," object with the optimal marginal carbon\nintensity window."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'EmissionsForecast()\n{\n  RequestedAt: DateTimeOffset("2022-07-19T13:30:00+00:00"),\n  GeneratedAt: DateTimeOffset("2022-07-19T13:35:00+00:00"),\n  OptimalDataPoints: [\n    EmissionsData()\n    {\n      Location: "IE",\n      Time: DateTimeOffset("2022-07-19T18:45:00+00:00"),\n      Duration: 10,\n      Rating: 448.4451043375\n    }\n  ],\n  EmissionsDataPoints: [\n    EmissionsData()\n    {\n      Location: "IE",\n      Time: DateTimeOffset("2022-07-19T14:00:00+00:00"),\n      Duration: 10,\n      Rating: 532.02293146\n    },\n    ...\n    EmissionsData()\n    {\n      Location: "IE",\n      Time: DateTimeOffset("2022-07-20T04:25:00+00:00"),\n      Duration: 10,\n      Rating: 535.7318741001667\n    }\n  ]\n}\n')),(0,i.kt)("h2",{id:"data-sources"},"Data Sources"),(0,i.kt)("h3",{id:"watttime"},"WattTime"),(0,i.kt)("h4",{id:"locations"},"Locations"),(0,i.kt)("p",null,"Each WattTime emissions data point is associated with a particular named\nbalancing authority. For transparency, this value is also used in\n",(0,i.kt)("inlineCode",{parentName:"p"},"EmissionsData")," response objects. It is not overwritten to match the named\ndatacenter provided by any request."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},'"A balancing authority ensures, in real time, that power system demand and\nsupply are finely balanced. This balance is needed to maintain the safe and\nreliable operation of the power system. If demand and supply fall out of\nbalance, local or even wide-area blackouts can result."'),(0,i.kt)("p",{parentName:"blockquote"},"See ",(0,i.kt)("a",{parentName:"p",href:"https://www.eia.gov/todayinenergy/detail.php?id=27152"},"this post")," on\nbalancing authories from the EIA to learn more.")),(0,i.kt)("h4",{id:"exception-handling"},"Exception Handling"),(0,i.kt)("p",null,"If WattTime responds with a 4XX or 5XX status code the WattTime Data Source will\nforward the response code and message back to the caller. Refer to the\n",(0,i.kt)("a",{parentName:"p",href:"https://www.watttime.org/api-documentation/"},"current WattTime documentation"),"\nfor the most up-to-date information about possible error codes."),(0,i.kt)("h4",{id:"example-emissions-call-using-watttime"},"Example Emissions Call Using WattTime"),(0,i.kt)("p",null,"The swimlanes diagram below follows an example request for emissions data using\nWattTime as the data source provider. In this diagram, the ",(0,i.kt)("em",{parentName:"p"},"Client")," is a user of\nthe SDK and the ",(0,i.kt)("em",{parentName:"p"},"WattTimeService")," is the ",(0,i.kt)("a",{parentName:"p",href:"https://www.wattime.org"},"WattTime"),"\nAPI."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"webapi to watttime flow diagram",src:a(9303).Z,width:"1300",height:"1034"})),(0,i.kt)("h3",{id:"electricitymaps"},"ElectricityMaps"),(0,i.kt)("h4",{id:"locations-1"},"Locations"),(0,i.kt)("p",null,"Each ElectricityMaps emissions data point is associated with a particular named\nzone name. While the ElectricityMaps endpoint supports calling with lat/long\ngeoposition as well, the result will always be a corresponding zone name. They\nprovide a\n",(0,i.kt)("a",{parentName:"p",href:"https://static.electricitymaps.com/api/docs/index.html#zones"},"route on their API"),"\nwhich can be queried to list all the zone names you have access to given your\ntoken"),(0,i.kt)("h4",{id:"exception-handling-1"},"Exception Handling"),(0,i.kt)("p",null,"If ElectricityMaps responds with a 4XX or 5XX status code the ElectricityMaps\nData Source will forward the response code and message back to the caller. Refer\nto the\n",(0,i.kt)("a",{parentName:"p",href:"../src/CarbonAware.DataSources/CarbonAware.DataSources.ElectricityMaps/src/Client/ElectricityMapsClientHttpException.cs"},"ElectricityMapsHttpClientException"),"\nclass for documentation on expected error codes."),(0,i.kt)("h3",{id:"electricitymapsfree"},"ElectricityMapsFree"),(0,i.kt)("h4",{id:"locations-2"},"Locations"),(0,i.kt)("p",null,"Each ElectricityMapsFree emissions data point is associated with a particular\nnamed country code. While the ElectricityMapsFree endpoint supports calling with\nlat/long geoposition as well, the result will always be a corresponding country\ncode.\nThey provide a\n",(0,i.kt)("a",{parentName:"p",href:"https://static.electricitymaps.com/api/docs/index.html#zones"},"route on their parent API (ElectricityMaps)"),"\nwhich can be queried to list all the country codes you have access to given your\ntoken."),(0,i.kt)("h4",{id:"exception-handling-2"},"Exception Handling"),(0,i.kt)("p",null,"If ElectricityMapsFree responds with a 4XX or 5XX status code the\nElectricityMapsFree Data Source will forward the response code and message back\nto the caller. Refer to the\n",(0,i.kt)("a",{parentName:"p",href:"../src/CarbonAware.DataSources/CarbonAware.DataSources.ElectricityMapsFree/src/Client/ElectricityMapsFreeClientHttpException.cs"},"ElectricityMapsFreeHttpClientException"),"\nclass for documentation on expected error codes."))}m.isMDXComponent=!0},9303:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/webapi-swimlanes-98813b02d7bd1d628ed4b55834ba443f.png"}}]);