"use strict";(self.webpackChunkcasdk_docs=self.webpackChunkcasdk_docs||[]).push([[8072],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),s=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=s(e.components);return o.createElement(l.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(t),p=r,f=d["".concat(l,".").concat(p)]||d[p]||m[p]||i;return t?o.createElement(f,a(a({ref:n},u),{},{components:t})):o.createElement(f,a({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=p;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[d]="string"==typeof e?e:r,a[1]=c;for(var s=2;s<i;s++)a[s]=t[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3007:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var o=t(7462),r=(t(7294),t(3905));const i={},a="3. Move Command Line Parameters to Config File",c={unversionedId:"architecture/decisions/command-line-params-to-config",id:"architecture/decisions/command-line-params-to-config",title:"3. Move Command Line Parameters to Config File",description:"Status",source:"@site/docs/architecture/decisions/0003-command-line-params-to-config.md",sourceDirName:"architecture/decisions",slug:"/architecture/decisions/command-line-params-to-config",permalink:"/carbon-aware-sdk/docs/architecture/decisions/command-line-params-to-config",draft:!1,editUrl:"https://github.com/Green-Software-Foundation/carbon-aware-sdk/docs/architecture/decisions/0003-command-line-params-to-config.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"2. Dev Containers",permalink:"/carbon-aware-sdk/docs/architecture/decisions/dev-containers"},next:{title:"4. Documentation",permalink:"/carbon-aware-sdk/docs/architecture/decisions/documentation"}},l={},s=[{value:"Status",id:"status",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Consequences",id:"consequences",level:2},{value:"Green Impact",id:"green-impact",level:2}],u={toc:s},d="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"3-move-command-line-parameters-to-config-file"},"3. Move Command Line Parameters to Config File"),(0,r.kt)("h2",{id:"status"},"Status"),(0,r.kt)("p",null,"Accepted"),(0,r.kt)("h2",{id:"context"},"Context"),(0,r.kt)("p",null,"The CLI works currently through a variety of command line parameters, and while\nthis works for the current array of options, it is unlikely to cater for future\nneeds."),(0,r.kt)("p",null,"With a dynamic plugin based architecture, plugins will require a variety of\ncustom configurations that can not be predetermined by the command line."),(0,r.kt)("p",null,'To handle this we need to abstract this complexity of "how" the SDK is\nconfigured from the command line parameters.'),(0,r.kt)("h2",{id:"decision"},"Decision"),(0,r.kt)("p",null,'The decisions is to move all command line parameters other than time "-t --time\n-toTime" and location "-l --location" parameters to a standard\n"carbon-aware.config". The only other command line parameters that will remain\nare "-h --help" and a new command line parameter to define the configuration\nfile location "-c --config".'),(0,r.kt)("p",null,"The file will be a json file due to json being widely known, and static data\nfiles already being in json, so this will not introduce any other dependencies\nor skills."),(0,r.kt)("h2",{id:"consequences"},"Consequences"),(0,r.kt)("p",null,"This will mean the application will have a standalone executable + a config\nfile."),(0,r.kt)("p",null,'The usage focus becomes more of "when" and "where" vs "how". "How" is now\nconfigured.'),(0,r.kt)("p",null,"Regardless of plugin, the command line parameters will always be the same. This\nwill create more consistency. Due to this, testing command line will now be\nconsistent across plugins due to the configuration file being the only change."),(0,r.kt)("p",null,"For native integration to the SDK, this configuration would usually be in code.\nThis can still occur, however it would not be possible to store this\nconfiguration externally if required, making the native code configurable also."),(0,r.kt)("p",null,"Configuration may differ betweeen platforms/languages - however this would be\nthe case via command line. This means there will be consistency in the command\nline between platforms, hiding platform depdendencies from the parameters and\nmoved to the config."),(0,r.kt)("h2",{id:"green-impact"},"Green Impact"),(0,r.kt)("p",null,"Neutral"))}m.isMDXComponent=!0}}]);