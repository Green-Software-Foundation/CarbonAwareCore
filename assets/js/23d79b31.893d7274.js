"use strict";(self.webpackChunkcasdk_docs=self.webpackChunkcasdk_docs||[]).push([[1064],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>g});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},l=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(a),d=n,g=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return a?r.createElement(g,o(o({ref:t},l),{},{components:a})):r.createElement(g,o({ref:t},l))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:n,o[1]=c;for(var p=2;p<i;p++)o[p]=a[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},286:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var r=a(7462),n=(a(7294),a(3905));const i={},o="Containerized WebApi",c={unversionedId:"tutorial-basics/containerization",id:"tutorial-basics/containerization",title:"Containerized WebApi",description:"The goal of this readme is to show how to build a container WebApi image that",source:"@site/docs/tutorial-basics/containerization.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/containerization",permalink:"/carbon-aware-sdk/docs/tutorial-basics/containerization",draft:!1,editUrl:"https://github.com/Green-Software-Foundation/carbon-aware-sdk/docs/tutorial-basics/containerization.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Carbon Aware WebApi",permalink:"/carbon-aware-sdk/docs/tutorial-basics/carbon-aware-webapi"},next:{title:"Tutorial - Extras",permalink:"/carbon-aware-sdk/docs/category/tutorial---extras"}},s={},p=[{value:"Build and List Runtime Image",id:"build-and-list-runtime-image",level:2},{value:"Run WebApi Image",id:"run-webapi-image",level:2},{value:"Upload Image to a Container Registry",id:"upload-image-to-a-container-registry",level:2},{value:"Docker Hub",id:"docker-hub",level:3},{value:"Azure Container Registry",id:"azure-container-registry",level:3},{value:"Pipeline Integration (Github Action)",id:"pipeline-integration-github-action",level:2}],l={toc:p},u="wrapper";function m(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,r.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"containerized-webapi"},"Containerized WebApi"),(0,n.kt)("p",null,"The goal of this readme is to show how to build a container WebApi image that\ncan be used to deploy the application into a container registry and that can be\nused later to run the service."),(0,n.kt)("h2",{id:"build-and-list-runtime-image"},"Build and List Runtime Image"),(0,n.kt)("p",null,"Use ",(0,n.kt)("inlineCode",{parentName:"p"},"docker")," to build the WebApi images. (Note: Make sure the run ",(0,n.kt)("inlineCode",{parentName:"p"},"docker")," at\nthe root branch)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"cd ./$(git rev-parse --show-cdup)/src\ndocker build -t carbon_aware:v1 -f CarbonAware.WebApi/src/Dockerfile .\n")),(0,n.kt)("p",null,"List ",(0,n.kt)("inlineCode",{parentName:"p"},"carbon_aware")," image"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"docker image ls carbon_aware\nREPOSITORY     TAG       IMAGE ID       CREATED             SIZE\ncarbon_aware   v1        6293e2528bf2   About an hour ago   230MB\n")),(0,n.kt)("h2",{id:"run-webapi-image"},"Run WebApi Image"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Run the image using ",(0,n.kt)("inlineCode",{parentName:"p"},"docker run")," with host port 8000 mapped to the WebApi\nport 80 and configure environment variable settings for\n",(0,n.kt)("a",{parentName:"p",href:"https://www.watttime.org"},"WattTime")," provider."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'docker run --rm -p 8000:80 \\\n> -e DataSources__EmissionsDataSource="WattTime" \\\n> -e DataSources__ForecastDataSource="WattTime" \\\n> -e DataSources__Configurations__WattTime__Type="WattTime" \\\n> -e DataSources__Configurations__WattTime__password="username" \\\n> carbon_aware:v1\n')),(0,n.kt)("p",{parentName:"li"},"or the ",(0,n.kt)("a",{parentName:"p",href:"https://www.electricitymaps.com"},"ElectricityMaps")," provider"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'docker run --rm -p 8000:80 \\\n> -e DataSources__EmissionsDataSource="ElectricityMaps" \\\n> -e DataSources__ForecastDataSource="ElectricityMaps" \\\n> -e DataSources__Configurations__ElectricityMaps__Type="ElectricityMaps" \\\n> -e DataSources__Configurations__ElectricityMaps__APITokenHeader="auth-token" \\\n> -e DataSources__Configurations__ElectricityMaps__APIToken="<YOUR_ELECTRICITYMAPS_TOKEN>" \\\n> carbon_aware:v1\n')),(0,n.kt)("p",{parentName:"li"},"or the ",(0,n.kt)("a",{parentName:"p",href:"https://www.co2signal.com/"},"ElectricityMapsFree")," provider"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'docker run --rm -p 8000:80 \\\n> -e DataSources__EmissionsDataSource="ElectricityMapsFree" \\\n> -e DataSources__Configurations__ElectricityMapsFree__Type="ElectricityMapsFree" \\\n> -e DataSources__Configurations__ElectricityMapsFree__token="<YOUR_CO2SIGNAL_TOKEN>" \\\n> carbon_aware:v1\n'))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Verify that the WebApi is responding to requests using an HTTP client tool\n(e.g. ",(0,n.kt)("inlineCode",{parentName:"p"},"postman"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"curl"),")"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'curl -v -s -X \'POST\' http://localhost:8000/emissions/forecasts/batch  -H \'accept: */*\' -H \'Content-Type: application/json\' -d \'[\n    {\n        "requestedAt": "2021-11-01T00:00:00Z",\n        "dataStartAt": "2021-11-01T00:05:00Z",\n        "dataEndAt": "2021-11-01T23:55:00Z",\n        "windowSize": 5,\n        "location": "eastus"\n    }\n]\'\n...\n> POST /emissions/forecasts/batch HTTP/1.1\n> Host: localhost:8000\n...\n< HTTP/1.1 200 OK\n< Content-Type: application/json; charset=utf-8\n...\n<\n[{"generatedAt":"2021-11-01T00:00:00+00:00","optimalDataPoint":{\n    ...\n}}]\n')))),(0,n.kt)("h2",{id:"upload-image-to-a-container-registry"},"Upload Image to a Container Registry"),(0,n.kt)("p",null,"For easy image consumption, upload it to a well-known container registry,\nself-hosted or managed. The following are examples of using\n",(0,n.kt)("a",{parentName:"p",href:"https://hub.docker.com"},"docker hub")," or\n",(0,n.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/azure/container-registry/container-registry-quickstart-task-cli"},"Azure Container Registry")),(0,n.kt)("h3",{id:"docker-hub"},"Docker Hub"),(0,n.kt)("p",null,"Sign in to ",(0,n.kt)("a",{parentName:"p",href:"https://hub.docker.com"},"Docker Hub")," and create a private (or public)\nrepository (e.g ","#","your-username#/my-private-repo)"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Build and Push"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"docker login --username=your-username\ncd ./$(git rev-parse --show-cdup)/src\ndocker build -t #your-username#/my-private-repo/carbon_aware:v1 -f CarbonAware.WebApi/src/Dockerfile .\ndocker push #your-username#/my-private-repo/carbon_aware:v1\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Pull"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"docker login --username=your-username\ndocker pull #your-username#/my-private-repo/carbon_aware:v1\n")))),(0,n.kt)("h3",{id:"azure-container-registry"},"Azure Container Registry"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Build and Push image Assuming the container registry is already created, use\nthe user's credentials push the image using ",(0,n.kt)("inlineCode",{parentName:"p"},"docker")," (it can be done also\nusing\n",(0,n.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/azure/container-registry/container-registry-tutorial-quick-task"},"Azure CLI"),")"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"docker login <myacrname>.azurecr.io -u username -p <CopiedKeyFromAzurePortal>\ncd ./$(git rev-parse --show-cdup)/src\ndocker build -t <myacrname>.azurecr.io/carbon_aware:v1 -f arbonAware.WebApi/src/Dockerfile .\ndocker push <myacrname>.azurecr.io/carbon_aware:v1\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Pull image"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"docker login <myacrname>.azurecr.io -u username -p <CopiedKeyFromAzurePortal>\ndocker pull <myacrname>.azurecr.io/carbon_aware:v1\n")))),(0,n.kt)("h2",{id:"pipeline-integration-github-action"},"Pipeline Integration (Github Action)"),(0,n.kt)("p",null,"To automate an image deployment from a GitHub CI/CD pipeline, the following link\nprovides detailed information on how to build a ",(0,n.kt)("inlineCode",{parentName:"p"},"workflow")," with all the\nnecesarily tools in order to push an image to a container registry of user's\npreference (i.e. Docker Hub)."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/publishing-packages/publishing-docker-images#publishing-images-to-docker-hub"},"Github Workflows")))}m.isMDXComponent=!0}}]);